The ``0-add_integer`` module
======================

Using ``add_integer``
-------------------

Import function from module:
    >>> add_integer = __import__('0-add_integer').add_integer

# Test with two integers
    >>> add_integer(2, 3)
    5

# Test with one integer
    >>> add_integer(100)
    198

# Test with two float
    >>> add_integer(2.5, 2.5)
    4

# test with two integers, one of which is negative
    >>> add_integer(-5, 2)
    -3

# test with two negative integers
    >>> add_integer(-5, -5)
    -10


# Test negatives cases
# expected return: error

# test with one string and one integer
    >>> add_integer("2", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

# test with one integer & one string
    >>> add_integer(3, "4")
    Traceback (most recent call last):
    TypeError: b must be an integer

# test with one string and one float
    >>> add_integer("2", 3.5)
    Traceback (most recent call last):
    TypeError: a must be an integer

# test with one float & one string
    >>> add_integer(3.5, "4")
    Traceback (most recent call last):
    TypeError: b must be an integer

# test with two strings
    >>> add_integer("2", "3")
    Traceback (most recent call last):
    TypeError: a must be an integer

# test with None and one integer
    >>> add_integer(None, 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

# test with one integer and None
    >>> add_integer(3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer


# extreme cases

>>> add_integer(10**6, 10**6)
2000000

>>> add_integer(-10**6, -10**6)
-2000000

>>> add_integer(10**100, 1)
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001

>>> add_integer(3.9999999, 0.0000001)
3

>>> add_integer(1e10, 1e10)
20000000000


Test with special float values:
    >>> try:
    ...     add_integer(float('inf'), 2)
    ... except Exception as e:
    ...     print(e)
    cannot convert float infinity to integer
    
    >>> try:
    ...     add_integer(float('nan'), 2)
    ... except Exception as e:
    ...     print(e)
    cannot convert float NaN to integer

Test with both arguments as floats:
    >>> add_integer(1.9, 2.1)
    3

Test with boolean values (subclass of int):
    >>> add_integer(True, False)
    1
    >>> add_integer(False, True)
    1

Test with other data types:
    >>> try:
    ...     add_integer([1, 2, 3], 4)
    ... except Exception as e:
    ...     print(e)
    a must be an integer

    >>> try:
    ...     add_integer(4, {'key': 'value'})
    ... except Exception as e:
    ...     print(e)
    b must be an integer